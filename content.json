{"pages":[],"posts":[{"title":"CSS盒模型","text":"本文介绍一些关于CSS盒模型的知识 CSS盒模型盒模型组成部分 content box：这个区域是用来显示具体的内容 padding box：内边距，在边框和内容区域之间的空白区域 border box：边框用来包裹内容和内边距 margin box：盒子之间的空白区域 标准盒模型和IE（替代）盒模型 标准盒模型 使用width和height设置的是content box的宽度和高度，盒子的实际宽度和高度为（border、padding和width）和（border、padding和height）。 12345678div { width: 200px; height: 200px; background-color: pink; padding: 20px; border: 5px solid lightblue; margin: 20px;} 盒子的实际宽度=200px+20px*2+5px*2=250px 盒子的实际高度=200px+20px*2+5px*2=250px IE（替代）盒模型 使用width和height设置的就是盒子的实际宽度和高度 12345678div { width: 200px; height: 200px; background-color: pink; padding: 20px; border: 5px solid lightblue; margin: 20px;} 盒子实际宽度=200px 盒子实际高度=200px 内容盒子的宽度=200px-5px*2-20px*2=150px 内容盒子的高度=200px-5px*2-20px*2=150px CSS设置元素使用的盒模型box-sizing属性设置元素使用的盒模型，默认值为content-box，即浏览器默认使用标准盒模型，还有一个值为border-box（浏览器会使用IE盒模型）。","link":"/2021/05/03/CSS%E7%9B%92%E6%A8%A1%E5%9E%8B/"},{"title":"HTML总结（1）","text":"本文将介绍一些关于HTML的基础知识 一、HTML介绍HTML(HyperText Markup Language)超文本标记语言是用来告诉浏览器如何组织页面的标记语言 1、HTML结构123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt;&lt;/html&gt; 解析： &lt;!DOCTYPE&gt;：指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。 &lt;html&gt;&lt;/html&gt;：html元素是文档的根元素，包裹整个页面。 &lt;head&gt;&lt;/head&gt;：head元素是一个容器，存放meta，title，link等元素，head中的内容不会显示在页面上，用于辅助显示。 &lt;body&gt;&lt;/body&gt;：body元素包含所有显示在页面中内容，存放结构标签。 &lt;title&gt;&lt;/title&gt;：用于设置页面标题。当收藏该网页时，此标题将被用来作为网页描述。head标签中必须包含一个title标签 &lt;meta&gt;&lt;/meta&gt;：meta元素用来设置元数据（元数据简单来说就是描述数据的数据），包括网页使用字符集等。 HTML文档中的注释使用&lt;!--和--&gt;来包裹内容，注释中的内容对于用户是不可见的。注释是非常有必要，可以告诉编程者代码的一些相关信息。 HTML中的空白 无论HTML元素的内容有多少空白，最后都会被解析为一个空格，使得文档有更好的可读性。 2、HTML标签HTML元素和标签的区别：元素包含开始标签,结束标签和内容。 HTML元素分类： 双标签 单标签（自结束标签） 包含开始标签，结束标签和内容 只包含开始标签 分类 块级元素（block） 独占一行，并且不能嵌套在其他内联元素中 内联元素（inline） 也称行内元素，内联元素不会导致文本换行 属性1&lt;p class=&quot;name&quot;&gt;&lt;/p&gt; 其中class为属性，name为属性值，属性之间使用空格间隔，建议使用引号包含属性值，单引号和双引号都可以，不使用引号可能会出现意想不到的结果。 布尔属性（属性值和属性名是相同的，可省略属性值） 基本HTML标签 标题标签 h1~h6，对应一级标题到六级标题 一个页面应该只有一个h1标签 常用h2和h3标签 1&lt;h1&gt;我是标题&lt;/h1&gt; 段落标签 可以描述文章中的一个段落 是一个块元素，独占一行，并且会有一些css默认样式（因浏览器而异） 1&lt;p&gt;我是段落&lt;/p&gt; 文本格式化标签(建议使用第一个) 加粗（&lt;b&gt;,&lt;strong&gt;） 1&lt;b&gt;加粗&lt;/b&gt; 斜体（&lt;i&gt;,&lt;em&gt;） 1&lt;i&gt;斜体&lt;/i&gt; 下划线（&lt;u&gt;,&lt;ins&gt;） 1&lt;u&gt;下划线&lt;/u&gt; 换行标签（&lt;br&gt;） 使用该标签会强制换行 水平线标签（&lt;hr&gt;） 会在页面中显示一条水平线","link":"/2021/04/20/HTML%E6%80%BB%E7%BB%93%EF%BC%881%EF%BC%89/"},{"title":"HTML总结（2）","text":"本文将继续介绍一些关于HTML的基础知识 基本HTML标签 常用特殊字符 特殊字符 含义 &amp;nbsp; 空格 &amp;gt; 大于号 &amp;lt; 小于号 div标签和span标签（常用） div标签 块级元素，会独占一行。 span标签 内联元素（行内标签），不会独占一行，但是行内元素会有默认的小间隙。不能设置高度和宽度，大小由其内容决定。 div标签和span标签虽然经常使用，但是无语义，推荐使用语义元素。网页中div和span数量过多，会难以阅读。 建议使用div标签和span标签时使用class（常用）或id属性来标识元素，以便CSS进行样式控制。 img标签 示例 1&lt;img src=&quot;images/图片名称&quot; alt=&quot;替换文本&quot; title=&quot;图片标题&quot; width=&quot;宽度&quot; height=&quot;高度&quot;&gt; img标签是行内元素，多个img标签会出现在一行。 src属性：指定想要引入的图片的路径，相对路径和绝对路径都可以，推荐相对路径。因为使用绝对路径，会产生多余的HTTP请求，影响图片和网页加载时间。 alt属性：指定图片的替换文本，当图片加载失败时（路径错误或者图片类型不支持），alt指定的替换文本就会显示在图片的占位区域。替换文本应该可以比较准确的描述图片的内容，让用户有好的阅读体验。 title属性：指定图片的标题，当鼠标悬停在图片上方时，会出现title属性指定的文本。 可以使用width和height属性来指定图片的宽度和高度，默认大小是图片本身的尺寸。（这种做法并不推荐，应该使用CSS来改变图片的样式而不是HTML）。 a标签（超链接） 示例 1&lt;a href=&quot;链接地址&quot; title=&quot;提示文本&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt; a标签可以将文本、图像内容等转换为链接。超链接可以使得我们的文档链接到其他任何的文档（或者其他的资源）。 a标签会有默认样式，链接文本会有下划线，点击后的超链接为紫色字体，可以使用CSS修改样式。 href属性：指定链接指向的地址（网页或者其他类型文件），可以使用相对路径和绝对路径（推荐使用前者，原因和img标签类似）。 title属性：和img标签中title属性类似，用于提示文本。 target属性：指定链接页面的打开方式。默认值是_self，在当前标签页中打开。还可以设置_blank属性值，在新窗口中打开。 a标签中可以嵌套文本，也可以嵌套img标签。当点击图片时，就会跳转到链接地址。 href属性可以指定为#或者javascript:;属性值，变成空链接，当点击时，不会发生任何跳转。 超链接不仅可以链接到HTML文件，还可以链接到非HTML文档，如PDF、Word文档或者音频视频等文件。 链接分类 外部链接 href属性指定URL地址，指向外部网站的页面 内部链接 href属性指向网站内部页面 锚点链接 超链接可以链接到网页文档中一部分内容，需要给内容添加id属性标识，超链接href属性指定为#id属性值。 列表标签 无序列表（ul） 123456&lt;ul&gt; &lt;li&gt;列表项1&lt;/li&gt; &lt;li&gt;列表项2&lt;/li&gt; &lt;li&gt;列表项3&lt;/li&gt; &lt;li&gt;列表项4&lt;/li&gt; &lt;/ul&gt; 使用li标签包裹列表项，每个列表项之间没有顺序关系。li标签会有默认样式（小圆圈），可以使用CSS修改样式。 有序列表（ol） 123456&lt;ol&gt; &lt;li&gt;列表项1&lt;/li&gt; &lt;li&gt;列表项2&lt;/li&gt; &lt;li&gt;列表项3&lt;/li&gt; &lt;li&gt;列表项4&lt;/li&gt; &lt;/ol&gt; 和无序列表相同，使用li标签包裹列表项，但是列表项之间有顺序关系，同样有默认样式。 描述列表（dl） 123456789&lt;dl&gt; &lt;dt&gt;项目1&lt;/dt&gt; &lt;dd&gt;描述1&lt;/dd&gt; &lt;dd&gt;描述2&lt;/dd&gt; &lt;dt&gt;项目2&lt;/dt&gt; &lt;dd&gt;描述1&lt;/dd&gt; &lt;dt&gt;项目3&lt;/dt&gt; &lt;dd&gt;描述1&lt;/dd&gt; &lt;/dl&gt; 描述列表（description list）也称自定义列表，主要是为了标记一组项目及其描述，如术语与其定义等。 使用dt标签（description term）定义项目，dd标签（description description）定义其描述。每一个dt可以对应于多个dd。浏览器对于描述列表会有默认样式，在dt与dd之间产生缩进。 表格 表格的主要作用就是以结构化的形式显示数据，之前会用来做一些布局工作（历史原因），但是现在不推荐使用表格来布局。 示例 123456789101112131415161718192021&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;标题1&lt;/th&gt; &lt;th&gt;标题2&lt;/th&gt; &lt;th&gt;标题3&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;内容1&lt;/td&gt; &lt;td&gt;内容2&lt;/td&gt; &lt;td&gt;内容3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;内容1&lt;/td&gt; &lt;td&gt;内容2&lt;/td&gt; &lt;td&gt;内容3&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; 整个表格使用table标签来创建，表格的所有内容都需要嵌套在&lt;table&gt;&lt;/table&gt;内。 thead标签和tbody标签用来标识表格的头部区域和主体区域，并不会显示在页面中。如果不在表格中指定thead和tbody，默认会使用tbody来包裹所有内容。 tr标签（table row）指定表格每一行，tr标签数等于表格行数。tr标签内嵌套th标签和td标签。 th标签（table head）和td标签（table description）都是指定表格的单元格，区别是th表示的是标题单元格，而td表示的是描述单元格。th会有默认的浏览器样式，标题会居中加粗。 标题和单元格有colspan和rowspan两个属性，可以指定每个单元格跨多少行，多少列。 12&lt;th rowspan=&quot;2&quot;&gt;&lt;/th&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt; 结构标签除了有thead和tbody还有tfoot，用来定义表格的页脚，但是不常用。 表格中还可以嵌套表格，但是不推荐。因为这样会使得表格结构十分不清晰。","link":"/2021/04/22/HTML%E6%80%BB%E7%BB%93%EF%BC%882%EF%BC%89/"},{"title":"HTML总结（3）","text":"本文将继续介绍HTML中关于表单的基础知识 HTML基本标签 表单 HTML表单是用户与web站点之间交互的主要内容，它允许用户将数据发送到web站点。 HTML表单是由一个或者多个小部件组成，这些小部件可以是输入框（单行或多行）、单选框、复选框等。 表单组成 每一个HTML表单都由一个&lt;form&gt;元素开始： 1&lt;form action=&quot;提交地址&quot; method=&quot;post&quot;&gt;&lt;/form&gt; action属性定义了表单数据的提交地址，即交给谁来处理提交的表单数据。一般是一个URL地址。 method属性定义了发送数据时采用的HTTP方法。（get和post比较常用） &lt;label&gt;元素和&lt;input&gt;元素 12345678910&lt;form action=&quot;提交地址&quot; method=&quot;post&quot;&gt; &lt;div&gt; &lt;label for=&quot;name&quot;&gt;用户名：&lt;/label&gt; &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;username&quot;&gt; &lt;/div&gt; &lt;div&gt; &lt;label for=&quot;pwd&quot;&gt;密码：&lt;/label&gt; &lt;input type=&quot;text&quot; id=&quot;pwd&quot; name=&quot;password&quot;&gt; &lt;/div&gt;&lt;/form&gt; &lt;label&gt;标签指定了一个标签名，for属性用来链接到一个表单组件，for属性值必须和表单组件的id值相同。当用户点击label标签时会自动激活链接到的组件，优化用户体验。例如，当input标签为一个输入框时，点击对应的标签时，输入框会自动获取焦点。 &lt;input&gt;元素的type属性 type属性用来指定input元素的表现方式。 type属性值 text（默认值） 单行输入框 password 密码输入框，用户输入内容会使用小圆圈模糊 radio 单选框 checkbox 复选框 12345678910111213141516171819202122&lt;form action=&quot;提交地址&quot; method=&quot;post&quot;&gt; &lt;div&gt; &lt;label for=&quot;pwd&quot;&gt;密码：&lt;/label&gt; &lt;input type=&quot;password&quot; id=&quot;pwd&quot; name=&quot;passwrod&quot;&gt; &lt;/div&gt; &lt;div&gt; &lt;span&gt;性别：&lt;/span&gt; &lt;label for=&quot;man&quot;&gt;男&lt;/label&gt; &lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;man&quot;&gt; &lt;label for=&quot;woman&quot;&gt;女&lt;/label&gt; &lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;woman&quot;&gt; &lt;/div&gt; &lt;div&gt; &lt;span&gt;爱好：&lt;/span&gt; &lt;label for=&quot;basketball&quot;&gt;篮球&lt;/label&gt; &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; id=&quot;basketball&quot; value=&quot;basketball&quot;&gt; &lt;label for=&quot;tennis&quot;&gt;网球&lt;/label&gt; &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; id=&quot;tennis&quot; value=&quot;tennis&quot;&gt; &lt;label for=&quot;football&quot;&gt;足球&lt;/label&gt; &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; id=&quot;football&quot; value=&quot;football&quot;&gt; &lt;/div&gt;&lt;/form&gt; 注意：当type为radio时，多个单选框必须有相同的name属性，才能实现单选效果。（因为服务器接收的数据是以name区分，多个单选框属于同一个数据） type属性值 submit 提交按钮 reset 重置按钮 button 普通按钮 file 文件提交 123456&lt;form action=&quot;提交地址&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt; &lt;br&gt; &lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt; &lt;br&gt; &lt;input type=&quot;button&quot; value=&quot;按钮&quot;&gt; &lt;br&gt; &lt;input type=&quot;file&quot;&gt;&lt;/form&gt; &lt;input&gt;按钮和&lt;button&gt;按钮的异同 相同：当使用按钮时，input元素和button元素行为相同，button元素也有type属性，可以设置为submit、reset和button。默认值是reset。 不同：input元素是一个空元素，必须通过value属性指定按钮内容，因此只能接收纯文本内容。button元素是一个双标签，可以在&lt;button&gt;&lt;/button&gt;中嵌套HTML内容，可以将按钮内容嵌套在button元素中。 可验证的&lt;input&gt;元素的type属性 必须满足条件，才能通过表单验证，这部分属性不常用。需要更加准确的验证，可以自定义验证规则。 type属性值 条件 email 限制用户输入必须为Email类型 url 限制用户输入必须为URL类型 date 用户选择日期 time 用户选择时间 month 用户选择月份 week 用户选择周 number 限制用户输入必须为数字 tel 限制用户输入必须为电话 search 搜索框 color 用户选择颜色 HTML新增表单验证属性 表单验证属性 required 表单组件为必填项 maxLength 输入长度不超过指定的值 min 输入内容的最小值 max 输入内容的最大值 step 设置的步数 &lt;input&gt;元素的属性 属性值 name 用于区分不同表单组件，服务器根据name处理数据 value 表单组件的默认值 checked 当是表单选择组件时，有checked属性的选择项会被默认选中 placeholder 提示文本 autofocus 自动聚焦属性，当页面加载完成后，表单组件会自动获得焦点 multiple 当type属性值为file时，可以多选文件提交 readonly 当type属性值为text时，该属性会使得输入框只读 disabled 当表单组件添加该属性，该组件将会被禁用，既不可用，也不可点击 多行文本框&lt;textarea&gt; textarea元素用于指定多行文本框，可以使用cols和rows属性设置文本框的列数和行数。 123&lt;form action=&quot;提交地址&quot; method=&quot;post&quot;&gt; &lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt;多行文本框&lt;/textarea&gt;&lt;/form&gt; 大多数浏览器中，多行文本框默认右下角有一个拖放区域，控制文本框的大小，可以使用CSS设置&lt;textarea&gt;元素的resize属性为none来关闭。 &lt;textarea&gt;元素和&lt;input&gt;的异同 相同：两个元素中只能接收纯文本内容，不会解析HTML代码。 不同：两者编写方式不同，input元素为空元素，只能通过设置value属性值来指定文本框默认内容。textarea元素可以将默认内容嵌套在&lt;textarea&gt;&lt;/textarea&gt;中。 下拉表单元素 &lt;select&gt;&lt;/select&gt;用于创建一个下拉表单框，可以嵌套一个或多个&lt;option&gt;元素，指定可能的值。 1234567&lt;form action=&quot;提交地址&quot; method=&quot;post&quot;&gt; &lt;select name=&quot;fruit&quot; id=&quot;fruit&quot;&gt; &lt;option value=&quot;提交值1&quot;&gt;Banana&lt;/option&gt; &lt;option value=&quot;提交值2&quot;&gt;Cherry&lt;/option&gt; &lt;option value=&quot;提交值3&quot;&gt;Lemon&lt;/option&gt; &lt;/select&gt;&lt;/form&gt; 对于option元素 添加selected属性，设置为下拉选择框的默认选项，页面加载完成后，会默认选择该选项。 添加value属性，当该option选项被选中后，提交表单时该value中的值就会被发送。 对于select元素 添加multiple属性，可以多选下拉选择框的选项，需要按下Ctrl键选择。 &lt;head&gt;标签以及元数据 &lt;head&gt;元素内容不会显示在浏览器中，其中保存页面的一些元数据。 &lt;meta&gt;元素包含在&lt;head&gt;元素中，用来定义文档中的一些元数据。（前文已提到过，元数据就是描述数据的数据） 12345&lt;meta charset=&quot;UTF-8&quot; /&gt;&lt;meta name=&quot;author&quot; content=&quot;作者&quot; /&gt;&lt;meta name=&quot;description&quot; content=&quot;描述&quot; /&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;UTF-8&quot;&gt;指定了文档的字符编码，在此文档中允许使用的字符集。一般设置为UTF-8，因为它包含了人类语言中大部分字符，如果使用其他字符集可能会出现乱码。 meta元素中包含了name和content属性，name属性指定meta元素的类型，说明该元素包含什么类型的信息。content属性指定了元数据内容。name类型可以有author和description，用来说明页面的作者和页面描述。 ```html 12345 主要针对浏览器兼容性的设置。- ```html &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; 用于指定浏览器的视窗大小 为站点添加自定义图标 将图标以.ico格式存放在与站点索引页index.html相同目录中 在&lt;head&gt;元素中引用该图标 1&lt;link rel=&quot;shortcut icon&quot; href=&quot;图标名.ico&quot; type=&quot;image/x-icon&quot;&gt; 在HTML文档中引入CSS样式 在&lt;head&gt;标签中添加&lt;style&gt;/&lt;style&gt;元素，将样式表内容写在其中。 引入外部CSS样式表（推荐） 1&lt;link rel=&quot;stylesheet&quot; href=&quot;CSS文件路径&quot;&gt; 在HTML文档中引入JavaScript文件 1&lt;script src=&quot;.js文件路径&quot;&gt;&lt;/script&gt; script元素没有必要放在&lt;head&gt;元素中，推荐放在文档尾部，&lt;/body&gt;标签之前。因为这样可以确保加载JS文件之前已经解析了所有的HTML内容。（如果JS文件使用了某个不存在的元素，浏览器就会报错） ​","link":"/2021/04/23/HTML%E6%80%BB%E7%BB%93%EF%BC%883%EF%BC%89/"},{"title":"hexo博客搭建与在GitHub发布","text":"本文介绍如何依赖于GitHub网站创建hexo博客 hexo搭建个人博客1、安装软件123gitnode.jshexo 检验是否安装成功 git 12$ git --versiongit version 2.27.0.windows.1 node 12$ node -vv12.18.1 2、Github仓库的创建与配置创建Github仓库打开Github官网，点击右上角加号，点击”New Repository”，要注意仓库的命名问题，要按照 账户名.github.io 的方式创建，否则后面的操作会出现问题。 创建好仓库后，图片右侧”Settings”，向下拉找到Github Pages，会看到 https://账户名.github.io/ 以后可以通过此网站访问博客。 配置git仓库如果你第一次使用git，就需要配置git的环境 12$ git config --global user.name &quot;账户名&quot;$ git config --global user.email &quot;邮箱&quot; 接下来输入 1$ cd ~/.ssh 会提示你找不到该文件或路径 接下来使用ssh-keygen生成私钥和公钥 1$ ssh-keygen -t rsa -C &quot;邮箱&quot; 查看生成的公钥和私钥 123456$ cd ~/.ssh$ lsid_rsa id_rsa.pub$ cat id_rsa.pubssh-rsa ...... 将公钥添加到GitHub中在GitHub中点击头像下拉框，点击”Settings”点击”New SSH key”添加新的公钥添加完成使用”ssh -T git@github.com“命令，测试添加ssh是否成功 123$ ssh -T git@github.com......Hi xxxx! You've successfully authenticated, but GitHub does not provide shell access. 3、node安装在官网下载长期支持版本，之后一路狂点next就行 4、Hexo的安装与配置最好使用git bash命令行进行操作 安装hexokinase1$ npm install hexo -g 等提示完成后，可以使用hexo -v命令进行测试，还可以检查其他组件是否安装成功 1234567891011121314151617181920$ hexo -vhexo: 4.2.1hexo-cli: 3.1.0os: Windows_NT 10.0.17763 win32 x64node: 12.18.1v8: 7.8.279.23-node.38uv: 1.38.0zlib: 1.2.11brotli: 1.0.7ares: 1.16.0modules: 72nghttp2: 1.41.0napi: 6llhttp: 2.0.4http_parser: 2.9.3openssl: 1.1.1gcldr: 37.0icu: 67.1tz: 2019cunicode: 13.0 初始化hexo文件夹1$ hexo init 接下来就慢慢等吧，有快有慢，失败就重新开始 当看到”Start blogging with Hexo！”时，说明初始化已经完成 接下来就是输入npm install 1$ npm install hexo的环境安装和初始化工作完成 hexo的操作12$ hexo g 生成静态文件$ hexo s 启动服务器。 服务器启动完成后，在浏览器中输入 https://localhost:4000 就可以登陆博客页面，但这个是本地的 将git库与hexo连接起来在hexo文件夹中找到_config.yml文件，在文件末尾找到deploy 1234deploy: type: git repository: git@github.com:账户名/账户名.github.io.git branch: master 注意：这些冒号后面必须有一个空格修改完成后，需要安装hexo-deployer-git插件，在blog目录下运行命令 1$ npm install hexo-deployer-git --save 以后凡是修改_config.yml文件后，都需要运行hexo d命令部署一下，否则修改内容将不会生效。 5、hexo常用命令创建一个博客1$ hexo new &quot;title&quot; 创建完成需要生成静态文件 12$ hexo g 生成静态文件$ hexo s 启动服务器 当确定博客已经创建完成，需要运行hexo d命令，将博客提交到git库 当遇到异常情况，可以使用hexo clean命令清除 至此，一个博客创作完成，可以在外网使用 https://账户名.github.io 的路径访问博客 6、hexo主题更改如果不喜欢原来的主题，可以将新的主题复制到themes目录中推荐使用yilia主题 1# git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 该下载时间可能会很长，慢慢等待 再修改_config.yml文件中的themes 1themes: yilia 网上有许多该主题配置教程，这里不再赘述 后记第一次写博客，还有许多不足和缺陷，仅供参考，欢迎讨论","link":"/2020/06/20/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/"},{"title":"HTML总结（4）","text":"本文将介绍HTML5新增多媒体标签以及一些语义化元素 HTML5新增多媒体标签&lt;video&gt;标签123&lt;video src=&quot;视频文件路径&quot; controls&gt; &lt;p&gt;你的浏览器不支持视频&lt;/p&gt;&lt;/video&gt; src：和&lt;img&gt;标签使用方式相同，属性值为视频文件的路径，注意后缀名。 controls：显示视频的控制组件，可以控制视频的播放。 &lt;video&gt;标签中的内容被称为后备内容。当浏览器不支持该标签时，就会显示标签内嵌套的内容。 由于浏览器可能会支持不同的媒体文件类型（.MP4，.MP3）,如果只给定一个文件来源，可能会导致视频不能正常播放。 12345&lt;video controls&gt; &lt;source src=&quot;视频文件.mp4&quot; type=&quot;video/mp4&quot;&gt; &lt;source src=&quot;视频文件.mp3&quot; type=&quot;video/mp3&quot;&gt; &lt;p&gt;你的浏览器不支持视频标签&lt;/p&gt;&lt;/video&gt; 将写在&lt;video&gt;标签中的src属性改为嵌套在&lt;video&gt;标签中的&lt;source&gt;标签。浏览器依次检查该标签，并播放自身可以支持的媒体文件。建议添加type属性，浏览器可以快速跳过不支持的类型，加快加载速度并且减少资源浪费。 &lt;video&gt;属性 属性 width和height 控制视频尺寸 autoplay 立即自动播放视频（不建议，Chrome禁止） loop 循环播放 muted 播放视频时，默认关闭声音 preload 用来缓存较大的文件 poster 等待加载视频时显示的图片 &lt;audio&gt;标签audio标签和video标签特性基本相同，但也有一些区别 audio标签不支持width和height属性 不支持poster属性，没有显示该图片的区域。 HTML中语义化元素什么是语义元素？语义是对某个内容的解释，当我们看到它，就知道它代表什么。HTML中包含一些语义元素，除了包裹特定内容文本，还包含了内容类型的一些信息。例如&lt;h1&gt;标题&lt;/h1&gt;，h1除了包裹内容，还告诉浏览器这个内容是一级标题。 为什么要语义化？ 有利于SEO（搜索引擎优化），可以帮助搜索引擎更好的理解网页的结构。 没有添加标识时，使得网页呈现出更清晰的结构。 提升开发效率，不同编程者可以更容易理解。 方便多终端设备的浏览器渲染 HTML常用语义化元素标识页面不同区域的标签 &lt;head&gt;：页眉 &lt;nav&gt;：导航栏 &lt;main&gt;：页面主体内容 &lt;article&gt;：包含在&lt;main&gt;中，表示文章区域 &lt;section&gt;：包含在&lt;main&gt;中，表示一个区域 &lt;aside&gt;：侧边栏 &lt;footer&gt;：页脚 因为语义化的一些好处，我们在布局时应使用这些标签来规划整体的页面结构，而不应该使用&lt;div&gt;等无语义元素。 其他一些常用语义化元素 元素 描述 h1~h6 标题标签 p 段落标签 ul 无序列表 ol 有序列表 li 列表项 blockquote 块引用 a 超链接 em、i 斜体 strong、b 粗体 abbr 缩写 q 行内引用 &lt;blockquote&gt;元素： 123&lt;div&gt; 前面的内容&lt;blockquote cite=&quot;引用内容的URL&quot;&gt;引用&lt;/blockquote&gt;后面的内容&lt;/div&gt; &lt;q&gt;元素： 123&lt;div&gt; 前面的内容&lt;q cite=&quot;引用内容的URL&quot;&gt;引用&lt;/q&gt;后面的内容&lt;/div&gt; 参考文献 MDN.Document and website structure","link":"/2021/04/24/HTML%E6%80%BB%E7%BB%93%EF%BC%884%EF%BC%89/"}],"tags":[{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"HTML","slug":"HTML","link":"/tags/HTML/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"}],"categories":[{"name":"前端基础","slug":"前端基础","link":"/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"},{"name":"HTML","slug":"前端基础/HTML","link":"/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/HTML/"},{"name":"CSS","slug":"前端基础/CSS","link":"/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/CSS/"},{"name":"博客","slug":"博客","link":"/categories/%E5%8D%9A%E5%AE%A2/"}]}